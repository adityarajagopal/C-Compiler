file			: external_decl {$$ = new File($1); root = $$;} 
	 			| external_decl file  {$$ = new File($1, $2); root = $$;}
				;

external_decl	: function_def {$$ = new ExternalDecl($1);}
				| decl {$$ = new ExternalDecl(NULL, $1);}
				;

function_def	: decl_specifiers declarator compound_statement {$$ = new FuncDef($1,$2,$3);} 
				;

decl			: decl_specifiers SEMICOLON {$$ = new Decl($1);}
				| decl_specifiers init_list SEMICOLON {$$ = new Decl($1, $2);}
				;	

decl_specifiers	: type_specifier {$$ = new DeclSpec($1);}
				| type_specifier decl_specifiers {$$ = new DeclSpec($1, $2);} 
				;

decl_list		: decl {$$ = new DeclList($1);}
				| decl decl_list {$$ = new DeclList($1,$2);}
				;

type_specifier	: TYPE {$$ = new TypeSpec($1);}
				;

init_list		: init_declarator {$$ = new InitList($1); } 
				| init_declarator COMMA init_list {$$ = new InitList($1, $3);} 
				;

init_declarator	: declarator {$$ = new InitDeclr($1);} 
				| declarator EQUALS initial_val {$$ = new InitDeclr($1, $3);}
				;

statement_list	: statement {$$ = new StatList($1);}
				| statement statement_list {$$ = new StatList($1,$2);}
				

statement		: compound_statement {} 
				| expr_statement {}
				| selection_statement {}
				| loop_statement {}
				| jump_statement {}
				| tag_statement {}
				;

declarator		: IDENTIFIER {$$ = new Declr($1);} 
				| declarator LBRAC param_list RBRAC {$$ = new Declr("", $1, $3, 1);} 
				| declarator LBRAC RBRAC {$$ = new Declr("", $1, NULL, 1);}
				| declarator LSQBRAC conditional_expr RSQBRAC {$$ = new Declr("",$1,NULL,0,$3,true);}
				| declarator LSQBRAC RSQBRAC {$$ = new Declr("",$1,NULL,0,NULL,true);}
				| pointer declarator {$$ = new Declr("",$2,NULL,0,NULL,false,$1);}
				;

pointer 		: MULT {$$ = new Pointer(NULL);}
				| pointer MULT {$$ = new Pointer($1);}
				;

param_list		: param_decl {$$ = new ParamList($1);}
				| param_decl COMMA param_list {$$ = new ParamList($1, $3);}
				;

param_decl		: decl_specifiers declarator {$$ = new ParamDecl($1,$2);} 
				;

compound_statement	: LCURLY RCURLY {$$ = new CompStat();} 
					| LCURLY statement_list RCURLY {$$ = new CompStat($2);} 
					| LCURLY decl_list RCURLY {$$ = new CompStat(NULL,$2);} 
					| LCURLY decl_list statement_list RCURLY {$$ = new CompStat($3,$2);}
					;

initial_val		: assign_expr {$$ = new InitVal($1);}
				| LCURLY init_val_list RCURLY {$$ = new InitVal(NULL,$2);}
				;

init_val_list 	: initial_val {$$ = new InitValList($1);}
				| initial_val COMMA init_val_list {$$ = new InitValList($1,$3);}
				;

selection_statement : IF LBRAC expr RBRAC statement {$$ = new SelecStat($3,$5);} 
					| IF LBRAC expr RBRAC statement ELSE statement {$$ = new SelecStat($3,$5,$7);}
					| SWITCH LBRAC expr RBRAC statement {$$ = new SelecStat($3,NULL,NULL,$5);}
					;

loop_statement	: WHILE LBRAC expr RBRAC statement {$$ = new LoopStat(NULL,NULL,$3,$5);}
				| do_statement {$$ = new LoopStat(NULL,NULL,NULL,NULL,$1);}
				| FOR LBRAC expr_statement expr_statement RBRAC statement {$$ = new LoopStat($3,$4,NULL,$6);}
				| FOR LBRAC expr_statement expr_statement expr RBRAC statement {$$ = new LoopStat($3,$4,$5,$7);}
				;

do_statement 	: DO statement WHILE LBRAC expr RBRAC SEMICOLON {$$ = new DoStat($2,$5);} 
				;

expr_statement 	: SEMICOLON {$$ = new ExprStat();}
				| expr SEMICOLON {$$ = new ExprStat($1);}
				;

jump_statement	: GOTO_KWD IDENTIFIER SEMICOLON {$$ = new JumpStat(NULL,"goto",$2);} 
				| RETURN SEMICOLON {$$ = new JumpStat(NULL, "return");}
				| RETURN expr SEMICOLON {$$ = new JumpStat($2, "return");}
				| BREAK SEMICOLON {$$ = new JumpStat(NULL, "break");}
				;

tag_statement 	: IDENTIFIER COLON statement {$$ = new TagStat($3, NULL, $1);}
				| CASE conditional_expr COLON statement {$$ = new TagStat($4,$2);}
				| DEFAULT COLON statement {$$ = new TagStat($3);}
				;				

expr			: assign_expr {$$ = new Expr($1);}  
				| expr COMMA assign_expr {$$ = new Expr($3,$1);}
				;

assign_expr		: conditional_expr {$$ = new AssExpr($1);}
				| unary_expr assign_oper assign_expr {$$ = new AssExpr(NULL,$1,$2,$3);}  
				;

assign_oper		: EQUALS {}
				| MUL_EQUALS {}
				| DIV_EQUALS {}
				| MOD_EQUALS {}
				| ADD_EQUALS {}
				| SUB_EQUALS {}
				| LEFT_EQUALS {}
				| RIGHT_EQUALS {}
				| AND_EQUALS {}
				| XOR_EQUALS {}
				| OR_EQUALS {}
				;

conditional_expr : logical_or_expr {$$ = new CondExpr($1);}
			     | ie_expr {$$ = new CondExpr(NULL, $1);}
				 ;

ie_expr			 : logical_or_expr QUESTION_MARK expr COLON conditional_expr {$$ = new IfElseExpr($1,$3,$5);}
				 ;

logical_or_expr : logical_and_expr {$$ = new Expression($1);}
				| logical_or_expr OR logical_and_expr {$$ = new Expression($1,$3,"||");}
				;

logical_and_expr : incl_or_expr {$$ = new Expression($1);}
				 | logical_and_expr AND incl_or_expr{$$ = new Expression($1,$3,"&&");}
				 ;

incl_or_expr 	: excl_or_expr{$$ = new Expression($1);}
				| incl_or_expr BW_OR excl_or_expr{$$ = new Expression($3,$1,"|");} 
				;

excl_or_expr	: and_expr{$$ = new Expression($1);}
				| excl_or_expr BW_XOR and_expr{$$ = new Expression($1,$3,"^");}
				;

and_expr		: bool_equal_expr{$$ = new Expression($1);}
				| and_expr BW_AND bool_equal_expr{$$ = new Expression($1,$3,"&");}
				;

bool_equal_expr : comparison_expr{$$ = new Expression($1);}
				| bool_equal_expr EQUAL_EQUAL comparison_expr{$$ = new Expression($1,$3,"==");}
				| bool_equal_expr NOT_EQUAL comparison_expr{$$ = new Expression($1,$3,"!=");}
				;

comparison_expr : shift_expr{$$ = new Expression($1);}
				| comparison_expr LT shift_expr{$$ = new Expression($1,$3,"<");}
				| comparison_expr GT shift_expr{$$ = new Expression($1,$3,">");}
				| comparison_expr LE shift_expr{$$ = new Expression($1,$3,"<=");}
				| comparison_expr GE shift_expr{$$ = new Expression($1,$3,">=");}
				;

shift_expr 		: addsub_expr{$$ = new Expression($1);}
				| shift_expr LEFT_SHIFT addsub_expr{$$ = new Expression($1,$3,"<<");}
				| shift_expr RIGHT_SHIFT addsub_expr{$$ = new Expression($1,$3,">>");}
				;

addsub_expr		: multdivmod_expr {$$ = new Expression($1);}
				| addsub_expr ADD multdivmod_expr{$$ = new Expression($1,$3,"+");}
				| addsub_expr SUB multdivmod_expr{$$ = new Expression($1,$3,"-");}
				;

multdivmod_expr : unary_expr {$$ = new Expression(NULL,NULL,"",$1);}
				| multdivmod_expr MULT unary_expr{$$ = new Expression($1,NULL,"*",$3);}
				| multdivmod_expr DIV unary_expr{$$ = new Expression($1,NULL,"/",$3);}
				|multdivmod_expr MOD unary_expr{$$ = new Expression($1,NULL,"%",$3);}
				;

unary_expr		: postfix_expr {$$ = new UnaryExpr($1);}
				| INC unary_expr {$$ = new UnaryExpr(NULL,$2,$1);}
				| DEC unary_expr {$$ = new UnaryExpr(NULL,$2,$1);}
				| unary_oper unary_expr {$$ = new UnaryExpr(NULL,$2,$1);} 
				;

unary_oper		: BW_AND
				| MULT
				| ADD 
				| SUB
				| BW_NOT
				| NOT
				;

postfix_expr	: primary_expr {$$ = new PostFixExpr($1);}
				| postfix_expr LBRAC RBRAC {$$ = new PostFixExpr(NULL,$1);}
				| postfix_expr LBRAC argument_list RBRAC {$$ = new PostFixExpr(NULL,$1,"",$3);}
				| postfix_expr INC {$$ = new PostFixExpr(NULL, $1, $2);}
				| postfix_expr DEC {$$ = new PostFixExpr(NULL, $1, $2);}
				| postfix_expr LSQBRAC expr RSQBRAC {$$ = new PostFixExpr(NULL, $1, "", NULL, $3,true);}
				;

argument_list 	: assign_expr {$$ = new ArgList($1);}
				| assign_expr COMMA argument_list {$$ = new ArgList($1,$3);}
				;

primary_expr	: IDENTIFIER {$$ = new PrimExpr($1,0);} 
				| INT_VAL {$$ = new PrimExpr($1,1);}
				| OCT_VAL {$$ = new PrimExpr($1,2);}
				| HEX_VAL {$$ = new PrimExpr($1,3);}
				| FLOAT_VAL {$$ = new PrimExpr($1,4);}  
				| CHAR {$$ = new PrimExpr($1,5);}  
				| STRING {$$ = new PrimExpr($1,6);}  
				| LBRAC expr RBRAC {$$ = new PrimExpr("",-1,$2);}
				;
l
